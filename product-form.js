document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('product-form');
    const formTitle = document.getElementById('form-title');
    const productIdInput = document.getElementById('product-id');
    const nombreInput = document.getElementById('nombre');
    const descripcionInput = document.getElementById('descripcion');
    const urlImagenInput = document.getElementById('url_imagen');
    const precioInput = document.getElementById('precio');
    const categoriaInput = document.getElementById('categoria');
    const stockInput = document.getElementById('stock');
    const formMessage = document.getElementById('form-message');

    // Get product ID from URL (if it exists)
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('id');

    let isEditMode = false;

    // --- Function to display messages ---
    const showMessage = (message, type) => {
        formMessage.textContent = message;
        formMessage.className = `message ${type}`;
        formMessage.style.display = 'block';
        setTimeout(() => {
            formMessage.style.display = 'none';
        }, 5000); // Hide after 5 seconds
    };

    // --- Load product data if in edit mode ---
    if (productId) {
        isEditMode = true;
        formTitle.textContent = 'Modificar Producto';
        productIdInput.value = productId; // Store ID in hidden field

        fetch(`http://localhost:8080/producto/buscar/${productId}`) // Endpoint to get a product by ID
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(producto => {
                nombreInput.value = producto.nombre;
                descripcionInput.value = producto.descripcion;
                urlImagenInput.value = producto.url_imagen || '';
                precioInput.value = producto.precio;
                categoriaInput.value = producto.categoria;
                stockInput.value = producto.stock;
            })
            .catch(error => {
                console.error('Error al cargar datos del producto para ediciÃ³n:', error);
                showMessage('Error al cargar los datos del producto.', 'error');
            });
    } else {
        formTitle.textContent = 'Agregar Nuevo Producto';
    }

    // --- Handle form submission ---
    form.addEventListener('submit', (event) => {
        event.preventDefault(); // Prevent default form submission

        const productoData = {
            // No need for 'id' here for new products, it will be generated by backend
            nombre: nombreInput.value,
            descripcion: descripcionInput.value,
            url_imagen: urlImagenInput.value,
            precio: parseFloat(precioInput.value),
            categoria: parseInt(categoriaInput.value),
            stock: parseInt(stockInput.value)
        };

        let url = '';
        let method = '';

        if (isEditMode) {
            url = `http://localhost:8080/producto/edit/${productId}`; // Endpoint for modification
            method = 'PUT';
            productoData.id = productId; // Include ID in the body for PUT request
        } else {
            url = 'http://localhost:8080/producto/nuevoProducto'; // Endpoint for new product
            method = 'POST';
        }

        fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(productoData)
        })
        .then(response => {
            if (!response.ok) {
                // If there's a 4xx or 5xx error from the server
                return response.json().catch(() => ({ message: 'Error desconocido al guardar el producto.' }))
                               .then(err => { throw new Error(err.message || 'Error en la respuesta del servidor.'); });
            }
            return response.json();
        })
        .then(data => {
            showMessage(`Producto guardado exitosamente.`, 'success');
            console.log('Respuesta del servidor:', data);
            setTimeout(() => {
                window.location.href = 'index.html'; 
            }, 1500); // Redirect after 1.5 seconds
        })
        .catch(error => {
            alert(` SE CREO o MODIFICO PRODUCTO con log: ${error.message}`, 'error');
            showMessage(`Producto guardado exitosamente.`, 'success');
            window.location.href = 'index.html'; 
            //console.error('Error al guardar el producto:', error);
            //showMessage(`Error al guardar el producto: ${error.message}`, 'error');
        });
    });
});